plugins {
    id 'java'
    id 'application'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id 'checkstyle'                    // Code style checking
    id 'jacoco'                        // Code coverage
}

repositories {
    mavenCentral()
}

dependencies {
    // JUnit
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.10.0'
    testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.10.0'
    // Java FX
    String javaFxVersion = '17.0.7'

    implementation group: 'org.openjfx', name: 'javafx-base', version: javaFxVersion, classifier: 'win'
    implementation group: 'org.openjfx', name: 'javafx-base', version: javaFxVersion, classifier: 'mac'
    implementation group: 'org.openjfx', name: 'javafx-base', version: javaFxVersion, classifier: 'linux'
    implementation group: 'org.openjfx', name: 'javafx-controls', version: javaFxVersion, classifier: 'win'
    implementation group: 'org.openjfx', name: 'javafx-controls', version: javaFxVersion, classifier: 'mac'
    implementation group: 'org.openjfx', name: 'javafx-controls', version: javaFxVersion, classifier: 'linux'
    implementation group: 'org.openjfx', name: 'javafx-fxml', version: javaFxVersion, classifier: 'win'
    implementation group: 'org.openjfx', name: 'javafx-fxml', version: javaFxVersion, classifier: 'mac'
    implementation group: 'org.openjfx', name: 'javafx-fxml', version: javaFxVersion, classifier: 'linux'
    implementation group: 'org.openjfx', name: 'javafx-graphics', version: javaFxVersion, classifier: 'win'
    implementation group: 'org.openjfx', name: 'javafx-graphics', version: javaFxVersion, classifier: 'mac'
    implementation group: 'org.openjfx', name: 'javafx-graphics', version: javaFxVersion, classifier: 'linux'
}

test {
    useJUnitPlatform()

    testLogging {
        events "passed", "skipped", "failed"

        showExceptions true
        exceptionFormat "full"
        showCauses true
        showStackTraces true
        showStandardStreams = false
    }
}

application {
    // mainClass.set("seeyes.Seeyes")
    mainClass.set("seeyes.Launcher")
}

shadowJar {
    archiveBaseName = "seeyes"
    archiveClassifier = null
}

run{
    standardInput = System.in
}

// Checkstyle configuration
checkstyle {
    toolVersion = '11.0.0'
}


// Task to create test directory structure mirroring main
task createTestStructure {
    doLast {
        def mainJavaDir = file('src/main/java')
        def testJavaDir = file('src/test/java')

        if (mainJavaDir.exists()) {
            mainJavaDir.eachDirRecurse { dir ->
                def relativePath = mainJavaDir.toPath().relativize(dir.toPath())
                def testDir = new File(testJavaDir, relativePath.toString())
                if (!testDir.exists()) {
                    testDir.mkdirs()
                    println "Created: ${testDir.path}"
                }
            }
            println "Test directory structure created successfully!"
        } else {
            println "Main source directory not found!"
        }
    }
}
